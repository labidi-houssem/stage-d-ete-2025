generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                @id @default(cuid())
  email                        String                @unique
  password                     String?
  name                         String?
  image                        String?
  emailVerified                DateTime?
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  cin                          String?               @unique
  nom                          String?
  prenom                       String?
  telephone                    String?
  dateDelivrance               DateTime?
  lieuDelivrance               String?
  address                      String?
  nationalite                  String?
  civilite                     String?
  dateNaissance                DateTime?
  gouvernorat                  String?
  specialite                   String?
  github                       String?
  role                         UserRole              @default(CANDIDAT)
  resetToken                   String?
  resetTokenExpiry             DateTime?
  disponibilites               Disponibilite[]       @relation("EnseignantDisponibilites")
  evaluationsAsCandidat        InterviewEvaluation[] @relation("EvaluationCandidat")
  evaluationsAsEnseignant      InterviewEvaluation[] @relation("EvaluationEnseignant")
  interviewRequestsSent        InterviewRequest[]    @relation("AdminInterviewRequests")
  interviewRequestsAsCandidate InterviewRequest[]    @relation("CandidateInterviewRequests")
  interviewRequestsReceived    InterviewRequest[]    @relation("EnseignantInterviewRequests")
  notifications                Notification[]
  reservations                 Reservation[]         @relation("CandidatReservations")
  cv                           Cv?                   @relation("CandidatCV")
}

model Disponibilite {
  id            String        @id @default(cuid())
  id_Enseignant String
  dateDebut     DateTime
  dateFin       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  enseignant    User          @relation("EnseignantDisponibilites", fields: [id_Enseignant], references: [id], onDelete: Cascade)
  reservations  Reservation[] @relation("DisponibiliteReservations")
}

model Reservation {
  id               String               @id @default(cuid())
  id_Candidat      String
  id_Disponibilite String
  status           ReservationStatus    @default(EN_ATTENTE)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  result           ReservationResult    @default(EN_ATTENTE)
  meetLink         String?
  evaluation       InterviewEvaluation?
  candidat         User                 @relation("CandidatReservations", fields: [id_Candidat], references: [id], onDelete: Cascade)
  disponibilite    Disponibilite        @relation("DisponibiliteReservations", fields: [id_Disponibilite], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InterviewRequest {
  id            String                 @id @default(cuid())
  adminId       String
  enseignantId  String
  candidateId   String
  status        InterviewRequestStatus @default(PENDING)
  dateEntretien DateTime?
  meetLink      String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  admin         User                   @relation("AdminInterviewRequests", fields: [adminId], references: [id], onDelete: Cascade)
  candidate     User                   @relation("CandidateInterviewRequests", fields: [candidateId], references: [id], onDelete: Cascade)
  enseignant    User                   @relation("EnseignantInterviewRequests", fields: [enseignantId], references: [id], onDelete: Cascade)
}

model InterviewEvaluation {
  id              String      @id @default(cuid())
  reservationId   String      @unique
  enseignantId    String
  candidatId      String
  francais        Int?
  anglais         Int?
  motivation      Int?
  cultureGenerale Int?
  bonus           Int?
  noteSur100      Int?
  observation     String?
  competence      Competence?
  status          EvaluationStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  candidat        User        @relation("EvaluationCandidat", fields: [candidatId], references: [id], onDelete: Cascade)
  enseignant      User        @relation("EvaluationEnseignant", fields: [enseignantId], references: [id], onDelete: Cascade)
  reservation     Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  ENSEIGNANT
  CANDIDAT
  ETUDIANT
}

enum EvaluationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ReservationStatus {
  EN_ATTENTE
  CONFIRMEE
  ANNULEE
  TERMINEE
}

enum ReservationResult {
  EN_ATTENTE
  ACCEPTER
  REFUSER
}

enum InterviewRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum Competence {
  CULTURE
  ART
  EXPERIENCE_ONG
  SPORT
  AUCUNE
}

// CV Models
model Cv {
  id             String            @id @default(cuid())
  candidatId     String            @unique
  title          String?
  template       String            @default("modern")
  isPublic       Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  candidat       User              @relation("CandidatCV", fields: [candidatId], references: [id], onDelete: Cascade)
  personalInfo   CvPersonalInfo?
  education      CvEducation[]
  experience     CvExperience[]
  skills         CvSkill[]
  languages      CvLanguage[]
  projects       CvProject[]
  certifications CvCertification[]
}

model CvPersonalInfo {
  id           String    @id @default(cuid())
  cvId         String    @unique
  firstName    String?
  lastName     String?
  email        String?
  phone        String?
  address      String?
  city         String?
  country      String?
  postalCode   String?
  dateOfBirth  DateTime?
  nationality  String?
  profileImage String?
  summary      String?
  linkedIn     String?
  website      String?
  github       String?
  cv           Cv        @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model CvEducation {
  id           String    @id @default(cuid())
  cvId         String
  institution  String
  degree       String
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?
  current      Boolean   @default(false)
  grade        String?
  description  String?
  order        Int       @default(0)
  cv           Cv        @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model CvExperience {
  id           String    @id @default(cuid())
  cvId         String
  company      String
  position     String
  location     String?
  startDate    DateTime?
  endDate      DateTime?
  current      Boolean   @default(false)
  description  String?
  achievements String[]
  order        Int       @default(0)
  cv           Cv        @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model CvSkill {
  id       String @id @default(cuid())
  cvId     String
  name     String
  level    Int    @default(1) // 1-5 scale
  category String? // Technical, Language, Soft Skills, etc.
  order    Int    @default(0)
  cv       Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model CvLanguage {
  id    String @id @default(cuid())
  cvId  String
  name  String
  level String // Beginner, Intermediate, Advanced, Native
  order Int    @default(0)
  cv    Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model CvProject {
  id           String    @id @default(cuid())
  cvId         String
  name         String
  description  String?
  technologies String[]
  url          String?
  githubUrl    String?
  startDate    DateTime?
  endDate      DateTime?
  order        Int       @default(0)
  cv           Cv        @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

model CvCertification {
  id           String    @id @default(cuid())
  cvId         String
  name         String
  issuer       String
  issueDate    DateTime?
  expiryDate   DateTime?
  credentialId String?
  url          String?
  order        Int       @default(0)
  cv           Cv        @relation(fields: [cvId], references: [id], onDelete: Cascade)
}
