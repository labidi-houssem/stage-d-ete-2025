// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  image         String?
  emailVerified DateTime?
  role          UserRole  @default(CANDIDAT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Additional fields from your signup form
  cin           String?   @unique
  nom           String?
  prenom        String?
  telephone     String?
  dateDelivrance DateTime?
  lieuDelivrance String?
  address       String?
  nationalite   String?
  civilite      String?
  dateNaissance DateTime?
  gouvernorat   String?
  specialite    String?

  // Relations
  disponibilites Disponibilite[] @relation("EnseignantDisponibilites")
  reservations   Reservation[]    @relation("CandidatReservations")
}

model Disponibilite {
  id            String    @id @default(cuid())
  id_Enseignant String
  dateDebut     DateTime
  dateFin       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  enseignant    User          @relation("EnseignantDisponibilites", fields: [id_Enseignant], references: [id], onDelete: Cascade)
  reservations  Reservation[] @relation("DisponibiliteReservations")
}

model Reservation {
  id               String           @id @default(cuid())
  id_Candidat      String
  id_Disponibilite String
  status           ReservationStatus @default(EN_ATTENTE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  candidat         User           @relation("CandidatReservations", fields: [id_Candidat], references: [id], onDelete: Cascade)
  disponibilite    Disponibilite  @relation("DisponibiliteReservations", fields: [id_Disponibilite], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  ENSEIGNANT
  CANDIDAT
}

enum ReservationStatus {
  EN_ATTENTE
  CONFIRMEE
  ANNULEE
  TERMINEE
}
